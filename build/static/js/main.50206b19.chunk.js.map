{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["handleResponse","response","text","then","data","JSON","parse","console","log","ok","status","error","statusText","Promise","reject","App","props","handleFetchData","fetch","method","headers","Accept","courses","setState","catch","err","state","classes","this","className","root","Grid","container","spacing","item","xs","justify","Paper","paper","Button","variant","color","onClick","map","res","key","_id","Component","withStyles","theme","margin","grid_root","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wQAiCMA,EAAiB,SAACC,GAEpB,OAAOA,EAASC,OACfC,MAAM,SAACD,GAGJ,IAAME,EAAOF,GAAQG,KAAKC,MAAMJ,GAIhC,GAFAK,QAAQC,IAAI,uCAAoCJ,IAE3CH,EAASQ,GAAI,CACU,MAApBR,EAASS,QACTH,QAAQC,IAAI,iBAAkBP,GAElC,IAAMU,EAASP,IAASA,EAAKO,OAASP,EAAKQ,YAE3C,OADAL,QAAQC,IAAI,4BAA6BG,GAClCE,QAAQC,OAAOH,GAE1B,OAAOP,MAMTW,E,kDAIF,WAAYC,GAAQ,IAAD,8BACf,gBAQJC,gBAAkB,WAGdC,MAAM,+BAnDF,CACJC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,sBAgDnBlB,KAAKH,GACLG,MAAM,SAACC,GACJG,QAAQC,IAAI,qBAAsBJ,EAAKkB,SAGvC,EAAKC,SAAS,CACVnB,KAAMA,EAAKkB,aAMlBE,OAAO,SAACC,GACLlB,QAAQC,IAAI,YAAaiB,OAvB7B,EAAKC,MAAQ,CACTtB,KAAM,IAJK,E,qDAkCR,IAEAuB,EAAWC,KAAKZ,MAAhBW,QAEP,OACI,yBAAKE,UAAWF,EAAQG,MAGxB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACH,UAAWF,EAAQG,KAAMG,QAAS,GAC9C,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAQ,SAASH,QAAS,GACtC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACG,EAAA,EAAD,CAAOR,UAAWF,EAAQW,OAA1B,aAOZ,kBAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAQ,SAASH,QAAS,GACtC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASd,KAAKX,iBAA1D,cAOZ,kBAACc,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAQ,SAASH,QAAS,GAEjCL,KAAKF,MAAMtB,KAAOwB,KAAKF,MAAMtB,KAAKuC,KAAI,SAAAC,GAAG,OAGtC,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACW,IAAKD,EAAIE,KAEnBF,EAAIE,QAMN,W,GAjFbC,aAiGHC,eAlJA,SAACC,GAAD,MAAY,CACvBnB,KAAM,CACF,QAAS,CACLoB,OAAQD,EAAMhB,QAAQ,KAG9BkB,UAAW,CACPC,SAAU,MA2IHJ,CAAmBjC,GC9IdsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEd3C,OAAM,SAAAb,GACLJ,QAAQI,MAAMA,EAAMyD,c","file":"static/js/main.50206b19.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst styles = (theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    grid_root: {\n        flexGrow: 1,\n      },\n     \n});\n\nconst getCourseOptions = () => {\n\n    return ({\n        method: 'GET',\n        headers: { \n            Accept: 'application/json',\n            'Content-Type': 'application/json' ,\n        }\n        //body: JSON.stringify({ userId })\n        })\n};\n\n\nconst handleResponse = (response ) => {\n\n    return response.text()\n    .then( (text) => {\n\n\n        const data = text && JSON.parse(text);\n\n        console.log(\"handleResponse response text --> \",data)\n\n        if (!response.ok) {\n            if (response.status !== 200) {\n                console.log(\"handleResponse\", response)\n            }\n            const error = (data && (data.error || data.statusText) );\n            console.log(\"error from handleResponse\", error)\n            return Promise.reject(error)\n        }\n        return data;\n    })\n\n};\n\n\nclass App extends Component {\n\n\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            data: []\n        }\n    }\n\n\n    handleFetchData = () => {\n\n\n        fetch(\"http://localhost:8080/course\", getCourseOptions())\n        .then(handleResponse)\n        .then( (data) => {\n            console.log(\"getPosts (course) \", data.courses)\n              \n            //return data:  data.posts  \n            this.setState({\n                data: data.courses\n            })\n\n\n        })\n        \n        .catch( (err) => {\n            console.log(\"get error\", err)            \n            //dispatch( { type: 'GETPOST_ERROR', err });\n        })\n\n\n    }\n\n\n    render () {\n\n        const {classes} = this.props;\n\n        return (\n            <div className={classes.root}>\n\n\n            <Grid container className={classes.root} spacing={2}>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={1}>\n                        <Grid item>\n                            <Paper className={classes.paper} >\n                                my App\n                            </Paper>\n                        </Grid>\n                    \n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={1}>\n                        <Grid item>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleFetchData}>\n                                getData\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={1}>\n                        \n                            {this.state.data ? this.state.data.map(res => (\n                                \n                                \n                                <Grid item key={res._id}>\n        \n                                {res._id}\n                            \n                                </Grid>\n                            \n                                                        )                            \n                            )\n                             : \"\"}\n\n                    </Grid>\n                </Grid>\n\n\n\n            </Grid>\n\n \n\n            </div>\n            );\n}}\n    \n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}